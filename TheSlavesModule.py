# –°–ö–†–ò–ü–¢ –ë–´–õ –°–î–ï–õ–ê–ù –§–ï–ô–î–ò–ß–ö–û–ô

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional

from hikka import loader, utils
from telethon import events
import aiohttp
from fake_useragent import UserAgent
ua = UserAgent()

logger = logging.getLogger(__name__)

class TheSlavesrMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API slaves.app: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–∞–º–∏."""

    strings = {
        "name": "TheSlavesr",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `<code>{}</code>`",
        "fetching": "üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ API...",
        "success_master": "‚úÖ <b>–¢–≤–æ–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å:</b>\n{}\n",
        "success_user": "‚úÖ <b>–ú–æ—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{}\n",
        "no_data": "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.",
        "usage_info_slaves": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.info_slaves [user_id]`",
        "usage_locksalve": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.lockslave <slave_id> <hours>`",
        "usage_autolock": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.autolock`",
        "usage_get_me": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.get_me`",
        "format_master": (
            "<b>ID:</b> <code>{}</code>\n"
            "<b>–ò–º—è:</b> {}\n"
            "<b>–§–∞–º–∏–ª–∏—è:</b> {}\n"
            "<b>Username:</b> @{}\n"
            "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {}\n"
            "<b>–¶–µ–Ω–∞:</b> {}\n"
            "<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {}\n"
            "<b>–í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {} –º–∏–Ω—É—Ç\n"
        ),
        "format_user": (
            "<b>ID:</b> <code>{}</code>\n"
            "<b>–ò–º—è:</b> {}\n"
            "<b>–§–∞–º–∏–ª–∏—è:</b> {}\n"
            "<b>Username:</b> @{}\n"
            "<b>ID –ü–æ–≤–µ–ª–∏—Ç–µ–ª—è:</b> <code>{}</code>\n"
            "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂:</b> {}\n"
            "<b>–¶–µ–Ω–∞:</b> {}\n"
            "<b>ID –û—Ç—Ä—è–¥–∞:</b> <code>{}</code>\n"
            "<b>–í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {} –º–∏–Ω—É—Ç\n"
            "<b>–¶–µ–Ω–∞ –∑–∞ —á–∞—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {}\n"
            "<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {}\n"
            "<b>–ë–∞–ª–∞–Ω—Å:</b> {}\n"
            "<b>–ë–∞–ª–∞–Ω—Å –≤ –º–∏–Ω—É—Ç—É:</b> {}\n"
            "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ–≤:</b> {}\n"
        ),
        "format_slave": (
            "üî∏ <b>ID –†–∞–±–∞:</b> <code>{}</code>\n"
            "üîπ <b>–ò–º—è:</b> {}\n"
            "üîπ <b>Username:</b> @{}\n"
            "üîπ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {}\n"
            "üîπ <b>–ë–∞–ª–∞–Ω—Å:</b> {}\n"
            "üîπ <b>–í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {} –º–∏–Ω—É—Ç\n"
        ),
        "success_locksalve": "üîí –†–∞–± —Å ID <code>{}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{}</b> —á–∞—Å–æ–≤.",
        "error_locksalve": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–∞ —Å ID <code>{}</code>: `<code>{}</code>`",
        "no_slaves": "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        "invalid_args": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.lockslave <slave_id> <hours>`",
        "autolock_summary": "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n{}\n",
        "get_me_info": (
            "<b>üìä –í–∞—à –ë–∞–ª–∞–Ω—Å:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n\n"
            "<b>üìà –î–æ—Ö–æ–¥:</b>\n"
            "‚Ä¢ <b>–í –º–∏–Ω—É—Ç—É:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ <b>–í —á–∞—Å:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ <b>–í –¥–µ–Ω—å:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ <b>–í –º–µ—Å—è—Ü:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "\n<b>üí∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ 1 –æ–±—Ö–æ–¥:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
        ),
        "error_get_me": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö: `<code>{}</code>`",
        "success_buyslave": "‚úÖ –†–∞–± —Å ID <code>{}</code> —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–ª–µ–Ω.",
        "error_buyslave": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID <code>{}</code>: `<code>{}</code>`",
        "monitor_started": "üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ–≤ –Ω–∞—á–∞—Ç. –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        "monitor_buyslave": "üîÑ –†–∞–± —Å ID <code>{}</code> –±—ã–ª –≤—ã–∫—É–ø–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        "error_no_auth": "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AUTHORIZATION_HEADER —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `.setauth`.",
    }

    BASE_URL = "https://prod.slaves.app/api"

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "AUTHORIZATION_HEADER",
                "",
                lambda: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è API",
            ),
            loader.ConfigValue(
                "BUY_ENDPOINT",
                "buy_slave",
                lambda: "–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–∫—É–ø–∞ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è) —Ä–∞–±–∞",
            )
        )
        self.COOKIES = {
            "tgauth": "TelegramInitData",
        }
        self.cache: Dict[str, Any] = {}
        self.cache_expiry: int = 300

    async def client_ready(self, client, db):
        """–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤."""
        self.client = client
        self.db = db
        auth_header = self.config["AUTHORIZATION_HEADER"]
        if not auth_header:
            await self.notify_me(self.strings["error_no_auth"])
            logger.error("AUTHORIZATION_HEADER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `.setauth` –¥–ª—è –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return
        await self.notify_me(self.strings["monitor_started"])
        asyncio.create_task(self.monitor_slaves())

    async def notify_me(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" (Saved Messages)."""
        try:
            await self.client.send_message('me', message, parse_mode='html')
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")

    async def get_user_id(self, message) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
        args = utils.get_args(message)
        if args:
            return args[0]
        sender = await message.get_sender()
        return str(sender.id) if sender else None

    async def make_request(self, method: str, endpoint: str, payload: Optional[Dict] = None) -> Optional[Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
        url = f"{self.BASE_URL}/{endpoint}"
        random_user_agent = ua.random
        headers = {
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "ru,en;q=0.9",
            "authorization": self.config["AUTHORIZATION_HEADER"],
            "user-agent": random_user_agent,
            "sec-ch-ua": '"Chromium";v="128", "Not;A=Brand";v="24", '
                        '"YaBrowser";v="24.10", "Yowser";v="2.5"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
            "referer": "https://prod.slaves.app/profile/6251264728",
        }
        try:
            async with aiohttp.ClientSession() as session:
                if method.lower() == "get":
                    async with session.get(url, headers=headers, cookies=self.COOKIES) as resp:
                        resp_text = await resp.text()
                        if resp.status == 200:
                            try:
                                return await resp.json()
                            except json.JSONDecodeError:
                                logger.error(f"GET {url} –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {resp_text}")
                                return None
                        else:
                            logger.error(f"GET {url} failed with status {resp.status}: {resp_text}")
                            return None
                elif method.lower() == "post":
                    headers["Content-Type"] = "application/json"
                    async with session.post(url, headers=headers, cookies=self.COOKIES, json=payload) as resp:
                        resp_text = await resp.text()
                        if resp.status == 200:
                            try:
                                return await resp.json()
                            except json.JSONDecodeError:
                                logger.error(f"POST {url} –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {resp_text}")
                                return None
                        else:
                            logger.error(f"POST {url} failed with status {resp.status}: {resp_text}")
                            return None
                elif method.lower() == "delete":
                    async with session.delete(url, headers=headers, cookies=self.COOKIES) as resp:
                        resp_text = await resp.text()
                        if resp.status == 200:
                            return True
                        else:
                            logger.error(f"DELETE {url} failed with status {resp.status}: {resp_text}")
                            return False
                else:
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ HTTP: {method}")
                    return None
        except aiohttp.ClientError as e:
            logger.error(f"HTTP request error: {e}")
            return None

    @loader.command()
    async def setauth(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç AUTHORIZATION_HEADER –¥–ª—è API."""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ AUTHORIZATION_HEADER.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.setauth <AUTHORIZATION_HEADER>`")
            return
        self.config["AUTHORIZATION_HEADER"] = args.strip()
        await message.edit("‚úÖ AUTHORIZATION_HEADER —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    @loader.command()
    async def info_slaves(self, message):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
        user_id = await self.get_user_id(message)
        if not user_id:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        await message.edit(self.strings["fetching"])
        data = await self.make_request("get", f"user/{user_id}/slaves")
        if not data:
            await message.edit(self.strings["no_data"])
            return
        response_text = ""
        if isinstance(data, dict):
            master = data.get("master")
            user = data.get("user")
            if master:
                formatted_master = self.strings["format_master"].format(
                    master.get("id", "N/A"),
                    master.get("first_name", "N/A"),
                    master.get("last_name", "‚Äî"),
                    master.get("username", "N/A"),
                    master.get("sells_count", "N/A"),
                    master.get("price", "N/A"),
                    master.get("performance", "N/A"),
                    master.get("time_to_unlock", "N/A"),
                )
                response_text += self.strings["success_master"].format(formatted_master)
            if user:
                formatted_user = self.strings["format_user"].format(
                    user.get("id", "N/A"),
                    user.get("first_name", "N/A"),
                    user.get("last_name", "‚Äî"),
                    user.get("username", "N/A"),
                    user.get("master_id", "N/A"),
                    user.get("sells_count", "N/A"),
                    user.get("price", "N/A"),
                    user.get("squad_id", "N/A"),
                    user.get("time_to_unlock", "N/A"),
                    user.get("lock_price_per_hour", "N/A"),
                    user.get("performance", "N/A"),
                    user.get("balance", "N/A"),
                    user.get("balance_per_minute", "N/A"),
                    user.get("slaves_count", "N/A"),
                )
                response_text += self.strings["success_user"].format(formatted_user)
        elif isinstance(data, list):
            response_text += "<b>üìú –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞–±–æ–≤:</b>\n\n"
            for slave in data:
                if isinstance(slave, dict):
                    formatted_slave = self.strings["format_slave"].format(
                        slave.get("id", "N/A"),
                        slave.get("first_name", "N/A"),
                        slave.get("username", "N/A"),
                        slave.get("performance", "N/A"),
                        slave.get("balance", "N/A"),
                        slave.get("time_to_unlock", "N/A"),
                    )
                    response_text += f"{formatted_slave}\n"
                else:
                    response_text += f"üî∏ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–∞: {slave}\n"
        else:
            await message.edit(self.strings["no_data"])
            return
        await message.edit(response_text, parse_mode="html")

    @loader.command()
    async def listslaves(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–∞–±–æ–≤."""
        user_id = await self.get_user_id(message)
        if not user_id:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        await message.edit(self.strings["fetching"])
        data = await self.make_request("get", f"user/{user_id}/slaves")
        if not data:
            await message.edit(self.strings["no_data"])
            return
        if isinstance(data, list):
            if not data:
                await message.edit(self.strings["no_slaves"])
                return
            response_text = "<b>üìú –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞–±–æ–≤:</b>\n\n"
            for slave in data:
                if isinstance(slave, dict):
                    formatted_slave = self.strings["format_slave"].format(
                        slave.get("id", "N/A"),
                        slave.get("first_name", "N/A"),
                        slave.get("username", "N/A"),
                        slave.get("performance", "N/A"),
                        slave.get("balance", "N/A"),
                        slave.get("time_to_unlock", "N/A"),
                    )
                    response_text += f"{formatted_slave}\n"
                else:
                    response_text += f"üî∏ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–∞: {slave}\n"
            await message.edit(response_text, parse_mode="html")
        else:
            await message.edit(self.strings["no_data"])

    @loader.command()
    async def lockslave(self, message):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤."""
        args = utils.get_args(message)
        if len(args) != 2:
            await message.edit(self.strings["invalid_args"])
            return
        slave_id, hours = args
        if not (slave_id.isdigit() and hours.isdigit()):
            await message.edit(self.strings["invalid_args"])
            return
        hours = int(hours)
        await message.edit("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–∞–±–∞...")
        payload = {
            "slave_id": int(slave_id),
            "hours": hours
        }
        data = await self.make_request("post", "lock_slave", payload)
        if data is not None:
            await message.edit(self.strings["success_locksalve"].format(slave_id, hours))
        else:
            await message.edit(self.strings["error_locksalve"].format(slave_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–∞."))

    @loader.command()
    async def autolock(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–∞–±–æ–≤ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö, –Ω–∞ 8 —á–∞—Å–æ–≤."""
        user_id = await self.get_user_id(message)
        if not user_id:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        await message.edit("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö...")
        slaves_data = await self.make_request("get", f"user/{user_id}/slaves")
        if not slaves_data:
            await message.edit(self.strings["no_data"])
            return
        if isinstance(slaves_data, dict):
            slaves = slaves_data.get("slaves", [])
        elif isinstance(slaves_data, list):
            slaves = slaves_data
        else:
            await message.edit(self.strings["error"].format("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤."))
            return
        if not slaves:
            await message.edit(self.strings["no_slaves"])
            return
        lock_url = "lock_slave"
        locked_slaves: List[str] = []
        already_locked_slaves: List[str] = []
        for slave in slaves:
            if not isinstance(slave, dict):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–∞: {slave}")
                continue
            slave_id = slave.get("id")
            time_to_unlock = slave.get("time_to_unlock", 0)
            if not slave_id:
                logger.warning(f"–†–∞–± –±–µ–∑ ID: {slave}")
                continue
            if isinstance(time_to_unlock, int) and time_to_unlock > 0:
                already_locked_slaves.append(str(slave_id))
            else:
                lock_payload = {
                    "slave_id": int(slave_id),
                    "hours": 8
                }
                lock_response = await self.make_request("post", lock_url, lock_payload)
                if lock_response is not None:
                    locked_slaves.append(str(slave_id))
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–∞ {slave_id}")
        summary = ""
        if locked_slaves:
            summary += "<b>üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–±—ã:</b>\n" + "\n".join([f"- ID: <code>{sid}</code>" for sid in locked_slaves]) + "\n\n"
        if already_locked_slaves:
            summary += "<b>‚è≥ –†–∞–±—ã —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n" + "\n".join([f"- ID: <code>{sid}</code>" for sid in already_locked_slaves]) + "\n"
        if summary:
            await message.edit(self.strings["autolock_summary"].format(summary), parse_mode="html")
        else:
            await message.edit("‚ÑπÔ∏è –ù–µ—Ç —Ä–∞–±–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

    @loader.command()
    async def get_me(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ 1 –æ–±—Ö–æ–¥ –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ–≤ –≤ –∫–∞–Ω–¥–∞–ª—ã."""
        user_id = await self.get_user_id(message)
        if not user_id:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        await message.edit(self.strings["fetching"])
        data = await self.make_request("get", f"user/{user_id}")
        if not data:
            await message.edit(self.strings["error_get_me"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API."))
            return
        try:
            user = data.get("user")
            if not user:
                await message.edit(self.strings["error_get_me"].format("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."))
                return
            balance = user.get("balance")
            balance_per_minute = user.get("balance_per_minute")
            lock_price_per_hour = user.get("lock_price_per_hour")
            slaves_count = user.get("slaves_count")
            if balance is None or balance_per_minute is None or lock_price_per_hour is None or slaves_count is None:
                await message.edit(self.strings["error_get_me"].format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API."))
                return
            income_per_minute = balance_per_minute
            income_per_hour = income_per_minute * 60
            income_per_day = income_per_hour * 24
            income_per_month = income_per_day * 30
            HOURS_PER_LOOP = 8
            expense_per_loop = lock_price_per_hour * HOURS_PER_LOOP * slaves_count
            formatted_info = self.strings["get_me_info"].format(
                balance,
                income_per_minute,
                income_per_hour,
                income_per_day,
                income_per_month,
                expense_per_loop
            )
            await message.edit(formatted_info, parse_mode="html")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è get_me: {e}")
            await message.edit(self.strings["error_get_me"].format("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."))

    @loader.command()
    async def buyslave(self, message):
        """–í—ã–∫—É–ø–∞–µ—Ç (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç) —Ä–∞–±–∞ –ø–æ –µ–≥–æ ID."""
        args = utils.get_args(message)
        if len(args) != 1:
            await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.buyslave <slave_id>`")
            return
        slave_id = args[0]
        if not slave_id.isdigit():
            await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç slave_id. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        await message.edit(f"üîÑ –ü—ã—Ç–∞—é—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID {slave_id}...")
        success = await self.buy_slave(slave_id)
        if success:
            await message.edit(self.strings["success_buyslave"].format(slave_id))
        else:
            await message.edit(self.strings["error_buyslave"].format(slave_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞."))

    async def buy_slave(self, slave_id: str) -> bool:
        """–í—ã–∫—É–ø–∞–µ—Ç (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç) slave –∞–∫–∫–∞—É–Ω—Ç –ø–æ –µ–≥–æ ID."""
        buy_endpoint = self.config["BUY_ENDPOINT"]
        payload = {
            "slave_id": int(slave_id)
        }
        response = await self.make_request("post", buy_endpoint, payload)
        if response is not None:
            logger.info(f"–†–∞–± —Å ID {slave_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–ª–µ–Ω.")
            await self.notify_me(self.strings["monitor_buyslave"].format(slave_id))
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID {slave_id}.")
            return False

    async def monitor_slaves(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∫–∞–∂–¥—ã–µ 1 –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ–≤ –∏ –≤—ã–∫—É–ø–∞–µ—Ç —Ç–µ—Ö, –∫—Ç–æ –ø–æ–∫–∏–Ω—É–ª —Å–∏—Å—Ç–µ–º—É."""
        await asyncio.sleep(10)
        while True:
            logger.info("–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–±–æ–≤...")
            user_id = await self.get_user_id_from_config_or_default()
            if not user_id:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                await asyncio.sleep(60)
                continue
            slaves_data = await self.make_request("get", f"user/{user_id}/slaves")
            if not slaves_data:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–±–∞—Ö.")
                await asyncio.sleep(60)
                continue
            slaves_list = []
            if isinstance(slaves_data, dict):
                slaves = slaves_data.get("slaves", [])
            elif isinstance(slaves_data, list):
                slaves = slaves_data
            else:
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API.")
                slaves = []
            if isinstance(slaves, list):
                slaves_list = slaves
            else:
                logger.error("–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º.")
                slaves_list = []
            if not slaves_list:
                logger.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–∞–±–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                await asyncio.sleep(60)
                continue
            for slave in slaves_list:
                if not isinstance(slave, dict):
                    logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–∞: {slave}")
                    continue
                slave_id = slave.get("id")
                status = slave.get("status")
                if not slave_id:
                    logger.warning(f"–†–∞–± –±–µ–∑ ID: {slave}")
                    continue
                if status == "left":
                    logger.info(f"–†–∞–± —Å ID {slave_id} –ø–æ–∫–∏–Ω—É–ª —Å–∏—Å—Ç–µ–º—É. –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∫—É–ø–∞...")
                    success = await self.buy_slave(slave_id)
                    if success:
                        logger.info(f"–†–∞–± —Å ID {slave_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–ª–µ–Ω.")
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID {slave_id}.")
                else:
                    logger.info(f"–†–∞–± —Å ID {slave_id} –≤ –Ω–æ—Ä–º–µ. –°—Ç–∞—Ç—É—Å: {status}")
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ñ–¥—É 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.")
            await asyncio.sleep(60)

    async def get_user_id_from_config_or_default(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        return str(message.from_id)
